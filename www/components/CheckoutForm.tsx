import { RefreshIcon } from '@heroicons/react/solid';
import Form from '@rjsf/core';
import { BigNumber } from 'ethers';
import { fromBn } from 'evm-bn';
import { useRouter } from 'next/router';
import { Dispatch, SetStateAction, useState } from 'react';
import nacl from 'tweetnacl';
import { DEFAULT_OFFER_SCHEMA } from '../lib/constants';
import { postToIPFS } from '../lib/ipfs';
import { useTokenMethods } from '../lib/tokens';
import { useChainId } from '../lib/useChainId';
import { useEncryptionKeypair } from '../lib/useEncryptionKey';
import { OrderData, useOrderMethods } from '../lib/useOrder';
import { WalletConnectedButton, KeyStoreConnectedButton } from './Buttons';
import { createRef } from 'react';
import DefaultJsonSchema from '../offer_schemas/QmazbhKYabkic5Z3F6hPC6rkGJP5gimu3eP9ABqMUZHFsk.json';
import { validate, ValidationError } from 'jsonschema';
import { SubmitOfferButton } from './SubmitOfferButton';
import { OfferForm } from './forms/AutoGeneratedForm';
import { SimpleOfferForm } from './forms/DefaultForm';

export function formatPrice(order: OrderData) {
  return fromBn(
    BigNumber.from(order.priceSuggested ? order.priceSuggested : 0),
    order.tokensSuggested[0].decimals
  );
}

export function CheckoutForm(props: {
  order: OrderData;
  setOfferData: Dispatch<SetStateAction<any>>;
  setValidChecker: (_: () => Boolean) => void;
}) {
  const [offerData, setOfferData] = useState({});

  const price = formatPrice(props.order);
  let validChecker: () => Boolean | undefined;

  return (
    <>
      <div>
        {props.order.offerSchemaUri &&
        props.order.offerSchemaUri.replace('ipfs://', '') !=
          DEFAULT_OFFER_SCHEMA ? (
          <OfferForm
            schema={props.order.offerSchema}
            setOfferData={setOfferData}
            offerData={offerData}
            price={price}
            setValidChecker={props.setValidChecker}
            symbol={props.order.tokensSuggested[0].symbol}
          />
        ) : (
          <SimpleOfferForm
            setOfferData={setOfferData}
            offerData={offerData}
            price={price}
            setValidChecker={props.setValidChecker}
            symbol={props.order.tokensSuggested[0].symbol}
          />
        )}
        <div className="mt-4 w-full">
          {/* <WalletConnectedButton>
            <KeyStoreConnectedButton>
              <SubmitOfferButton
                offerData={offerData}
                order={props.order}
                setTxHash={props.setTxHash}
              />
            </KeyStoreConnectedButton>
          </WalletConnectedButton>{' '} */}
          {/* <FormFooter
            price={price}
            symbol={props.order.tokensSuggested[0].symbol}
          /> */}
        </div>
      </div>
    </>
  );
}

function ObjectFieldTemplate(props: { properties: any }) {
  return (
    <div>
      {/* Let's omit the {props.title} {props.description}*/}
      {props.properties.map((element: any) => (
        <div key={element.name} className="property-wrapper w-full">
          {element.content}
        </div>
      ))}
    </div>
  );
}

const customWidgets = {
  TextWidget: (props: any) => {
    return (
      <div className="w-full">
        <input
          type="text"
          className="px-2 py-2 border rounded w-full"
          value={props.value}
          required={props.required}
          placeholder={props.uiSchema['ui:placeholder']}
          onChange={(event) => props.onChange(event.target.value)}
        />
      </div>
    );
  },
};

function CustomFieldTemplate(props: any) {
  const {
    id,
    classNames,
    label,
    help,
    required,
    description,
    errors,
    children,
  } = props;
  return (
    <div className={classNames + ' w-full mt-4'}>
      {id === 'root' || (
        <label htmlFor={id} className="text-sm font-bold py-1">
          {label}
          {required ? '*' : null}
        </label>
      )}
      {description}
      {children}
      {errors}
      {help}
    </div>
  );
}
